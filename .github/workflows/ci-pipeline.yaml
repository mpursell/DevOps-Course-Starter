name: Continuous Integration
on: 
  push:
    paths-ignore:
      -'./README.md'
      -'./tricks.yaml'
      -'documentation/**'
      -'logs/**'
  
  pull_request:
    paths-ignore:
      -'./README.md'
      -'./tricks.yaml'
      -'documentation/**'
      -'logs/**'

jobs:

  build:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # only output hash of image and pass that to docker run
      - run: docker run --rm $(docker build -q . --target testing)

  slackNotification:
    name: Slack notification
    runs-on: ubuntu-latest
    environment: Build and Test environment
    steps:
    - uses: actions/checkout@v2
    - name: Slack Notification Build & Test
      uses: bryannice/gitactions-slack-notification@2.0.0
      env:
        SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_MESSAGE: 'Build and test workflow running'
        SLACK_TITLE: 'Build and Test Notification'

  azurePublish:
    name: Azure Container Service Publish
    runs-on: ubuntu-latest
    environment: Build and Test environment
    needs: docker
    steps:
      - name: Azure Container Service Publish
        #uses: actions/checkout@v2
        run: curl -dH -X POST ${{ secrets.AZURE_WEBHOOK_URL }}

  docker:
    needs: build
    if: ${{github.ref_name == 'module12'}}
    runs-on: ubuntu-latest
    environment: Build and Test environment
    steps:
    - name: Checkout
      uses: actions/checkout@v1
      with:
        fetch-depth: 1
    
    # Setup docker buildx
    # https://github.com/docker/setup-qemu-action
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    
    # https://github.com/docker/setup-buildx-action
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build & Push to Docker Hub
      uses: opspresso/action-docker@master
      with:
        args: --docker

      env:
        IMAGE_NAME: mikerp/todoapp
        USERNAME: ${{ secrets.DOCKER_USERNAME }}
        PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        TAG_NAME: "latest"
        BUILDX: "true"

  installAzureCli:
    runs-on: ubuntu-latest
    environment: Build and Test environment
    steps:
    - name: install Azure CLI
      run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      shell: bash

  addAzureCliToPath:
    runs-on: ubuntu-latest
    needs: installAzureCli
    environment: Build and Test environment
    steps:
    - name: install Azure CLI
      run: export PATH=$PATH:/usr/bin/az
      shell: bash

  terraformInit:
    runs-on: ubuntu-latest
    needs: addAzureCliToPath
    environment: Build and Test environment
    steps:
    - name: Run terraform init
      run: terraform init
      shell: bash

  terraformApply:
    runs-on: ubuntu-latest
    needs: terraformInit
    environment: Build and Test environment
    steps:
    - name: Run terraform apply
      run: cd ~/ && terraform apply -auto-approve
      shell: bash
      env: 
        TF_VAR_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        TF_VAR_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        TF_VAR_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        TF_VAR_CLIENT_SECRET: ${{ secrets.ARM_SECRET_ID }}

  # terraformApply:
  #   runs-on: ubuntu-latest
  #   needs: terraformInit
  #   environment: Build and Test environment
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: terraform apply
  #       uses: dflook/terraform-apply@v1
  #       with:
  #         auto_approve: true
  #         variables: 
  #           TF_VAR_TENANT_ID = "${{ secrets.ARM_TENANT_ID }}"
  #           TF_VAR_SUBSCRIPTION_ID = "${{ secrets.ARM_SUBSCRIPTION_ID }}"
  #           TF_VAR_CLIENT_ID = "${{ secrets.ARM_CLIENT_ID }}"
  #           TF_VAR_CLIENT_SECRET = "${{ secrets.ARM_SECRET_ID }}"

  webhook:
    runs-on: ubuntu-latest
    needs: terraformApply
    steps:
    - name: Webhook
      run: curl -dH -X POST "$(terraform output -raw cd_webhook)"
      shell: bash





